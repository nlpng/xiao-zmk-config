/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define NUM 1
#define NAV 2

#include "keys/36.h"

/* Homerow mods */

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs


/ {
        behaviors {

                // Positional Homerow mods
                // Homerow mods that prevent accidental activations when rolling keys,
                // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
                // qwerty.
                //
                // Works by only allowing a mod to activate within tapping-term if
                // it's on the opposite side of the keyboard or on the same side thumb
                // keys.

                // Further optimization using urob's timerless homerow mods method:
                // https://github.com/urob/zmk-config#timeless-homerow-mods

                hml: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;

                        flavor = "balanced";
                        tapping-term-ms = <280>;
                        quick-tap-ms = <QUICK_TAP_MS>;
                        require-prior-idle-ms = <150>;
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <KEYS_R KEYS_T>;
                        hold-trigger-on-release;
                };

                hmr: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;

                        flavor = "balanced";
                        tapping-term-ms = <280>;
                        quick_tap_ms = <QUICK_TAP_MS>;
                        require-prior-idle-ms = <150>;
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <KEYS_L KEYS_T>;
                        hold-trigger-on-release;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        label = "Base";
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |               |  Y   |  U  |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  | ESC |   |  ~  |  H   |  J  |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  | ESC |   |  "  |  N   |  M  |  <  |  >  |  ?  |
// |  -  |  =  |  +  | TAB | RET | ALT |   |SPACE| BSPC |                 |  _  |
                        bindings = <
   &kp Q     &kp W     &kp E    &kp R    &kp T                         &kp Y    &kp U &kp I     &kp O   &kp P
   &kp A     &kp S     &kp D    &kp F    &kp G   &kp ESC     &kp GRAVE &kp H    &kp J &kp K     &kp L   &kp SEMI
   &kp Z     &kp X     &kp C    &kp V    &kp B   &kp ESC     &kp SQT   &kp N    &kp M &kp COMMA &kp DOT &kp FSLH
   &kp MINUS &kp EQUAL &kp PLUS &kp TAB  &kp RET &kp LALT    &kp SPACE &kp BSPC                         &kp BSLH
                        >;
                };
                num_layer {
                        label = "Num";
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                nav_layer {
                        label = "Nav";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
